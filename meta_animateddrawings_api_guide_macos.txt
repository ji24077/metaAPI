Meta AnimatedDrawings API + TorchServe 전체 구현 가이드 (맥OS 완전판)

────────────────────────────────────────────
🧩 0. 전제 조건 (맥OS)

- 운영체제: macOS (Intel/Apple Silicon 모두 지원)
- Python: 3.10.x (3.12 등 최신은 호환 불가)
- Conda 또는 venv 기반 가상환경 권장
- Homebrew 설치 필요 (패키지 관리용)

────────────────────────────────────────────
📁 1. 개발 환경 설정 (맥OS)

1.1. Homebrew 설치 (없는 경우):
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

1.2. 가상환경 생성 (conda 예시):
  conda create -n metaapi python=3.10
  conda activate metaapi

1.3. 필수 패키지 설치:
  pip install torchserve torch-model-archiver torch torchvision torch-model-archiver

1.4. 추가 의존성:
  pip install matplotlib opencv-python numpy==1.24.4 openmim

────────────────────────────────────────────
📦 2. mmcv-full 설치 (맥OS 핸들러 의존성 해결)

- 기존 mmcv 관련 제거:
  pip uninstall mmcv-lite mmcv-full mmcv -y

- openmim 설치:
  pip install -U openmim

- 맥OS CPU 환경 기준:
  mim install "mmcv-full<2.0.0"

- (Apple Silicon M1/M2 최적화):
  pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

- 설치 확인:
  python - <<EOF
import mmcv; print(mmcv.__version__)
import mmcv.ops, mmcv._ext
print("✅ mmcv-full OK")
EOF

────────────────────────────────────────────
⚙️ 3. TorchServe 설치 및 모델 등록 (맥OS)

3.1. Java JDK 설치 (TorchServe 요구):
  brew install openjdk@17
  echo 'export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"' >> ~/.zshrc
  source ~/.zshrc

3.2. 모델 준비:
  mkdir model-store
  wget https://github.com/facebookresearch/AnimatedDrawings/releases/download/v0.0.1/drawn_humanoid_detector.mar -P model-store/
  wget https://github.com/facebookresearch/AnimatedDrawings/releases/download/v0.0.1/drawn_humanoid_pose_estimator.mar -P model-store/

3.3. config.properties 예시 (맥OS 최적화):
  inference_address=http://0.0.0.0:8080
  management_address=http://0.0.0.0:8081
  model_store=model-store
  load_models=all
  default_workers_per_model=1
  vmargs=-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 -Xms512m -Xmx2g

3.4. TorchServe 실행:
  torchserve --start \
    --model-store model-store \
    --models all \
    --ts-config config.properties \
    --foreground

3.5. 정상 상태 확인:
  curl http://localhost:8080/ping        # {"status":"Healthy"}
  curl http://localhost:8080/models      # 모델 로딩 정보

────────────────────────────────────────────
🔍 4. AnimatedDrawings 설치 및 사용 (맥OS)

4.1. GitHub 소스 클론 + 설치:
  git clone https://github.com/facebookresearch/AnimatedDrawings.git
  cd AnimatedDrawings
  pip install -e .

4.2. 추가 의존성 (맥OS 최적화):
  pip install opencv-python matplotlib numpy==1.24.4

4.3. 간단 실행 테스트:
  python image_to_animation.py \
    drawings/garlic.png garlic_out

4.4. Python API 예시:
  from animated_drawings import render
  render.start('examples/config/mvc/export_mp4_example.yaml')

────────────────────────────────────────────
🛠️ 5. Flask 연동 예시 (맥OS)

- POST /upload:
    1. 업로드 이미지 저장
    2. subprocess.run(['python', 'image_to_animation.py', input.png, output_dir])
    3. 결과 video.gif 또는 mp4 전송

- GET /result/<file> → 파일 리턴/조회

────────────────────────────────────────────
🎨 6. Web 프론트 연동 예시

- 사용자 업로드 버튼: PNG/JPG 이미지 drag & drop
- 결과 영상 재생 영역: <video src="output/video.mp4" controls>
- 업로드 후 자동 재생 기능 추가
- fetch('/upload', { method: 'POST', body: formData })

────────────────────────────────────────────
🐛 7. 디버깅 & 문제 해결 (맥OS 특화)

7.1. mmcv 핸들러 에러:
  ModuleNotFoundError: mmcv.ops / mmcv._ext → mmcv-full 미설치

7.2. TorchServe 모델 로딩 실패:
  curl /models 출력 없음 / logs: Worker died 확인

7.3. 메모리 부족 (맥OS):
  Activity Monitor에서 Java 프로세스 메모리 사용량 확인
  config.properties의 vmargs 조정

7.4. config 경로 오류:
  render.start() 호출 시 실제 YAML 경로 확인

7.5. pose 인식 이상:
  fix_annotations.py 실행하여 annotations 보정

7.6. 맥OS 특화 문제:
  - 권한 문제: sudo 권한 필요 시 확인
  - 포트 충돌: lsof -i :8080 으로 포트 사용 확인
  - Homebrew 경로: echo $PATH 확인

────────────────────────────────────────────
📌 8. 권장 패키지 버전 요약 (맥OS)

- Python: 3.10.x
- torch: 2.0.x (CPU) - Apple Silicon 최적화
- torchserve: 0.11.0 ~ 0.12.0
- mmcv-full: 1.7.x (<2.0.0)
- numpy: 1.24.4
- opencv-python: 최신 안정 버전
- matplotlib, torchvision: 최신 호환 버전
- Java: OpenJDK 17 (Homebrew)

────────────────────────────────────────────
🍎 9. 맥OS 특화 팁

9.1. Apple Silicon (M1/M2) 최적화:
  - Rosetta 2 필요 시: softwareupdate --install-rosetta
  - ARM64 네이티브 빌드 권장

9.2. 성능 최적화:
  - Activity Monitor로 CPU/메모리 사용량 모니터링
  - 터미널에서 htop 설치: brew install htop

9.3. 개발 환경:
  - VS Code 또는 PyCharm 사용 권장
  - iTerm2 설치: brew install iterm2

────────────────────────────────────────────
✅ 이 문서 하나로 맥OS 환경에서 프로젝트 전체 구성부터 빌드, 실행, 디버깅, 연동까지 **모든 단계를 완전하게 커버**합니다. 